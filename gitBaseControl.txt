v0.3
————————————————————教程———————————————————
环境配置：https://www.bilibili.com/video/BV1k34y1Y7xk/?spm_id_from=333.1007.top_right_bar_window_history.content.click
git和github简易教程：https://www.bilibili.com/video/BV1s3411g7PS/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=49e986340caab1adb676ad93acb411f6
git学习练习网址：https://learngitbranching.js.org/?locale=zh_CN
——————————————————设置git——————————————————
//设置git的用户名和邮箱
git config --global user.name "nightstardawn"
git config --global user.email "1321665118@qq.com"
//初始化
git init 

——————————————————添加文件——————————————————
git add re01.txt//添加指定文件
git add . //添加该文件夹下的所有文件
//提交
git commit //进入vim编辑器
            按a键进入编辑模式，输入提交信息
            按esc键退出编辑模式，输入:wq保存并退出
git commit -m "提交信息"//直接提交
//查看提交目录
git log
//提交信息的规范格式
    feat: 新功能
    fix: 修补bug
    docs: 文档
    style: 格式（不影响代码运行的变动）
    refactor: 重构（即不是新增功能，也不是修改bug的代码变动）
    test: 增加测试
    chore: 构建过程或辅助工具的变动
eg："fix(text):change content"

————————————————————回退版本——————————————————
git reset --hard HEAD^//回退到上一个版本
git reset --hard HEAD~1//回退到上上一个版本
git reset --hard 版本编号//回退到指定版本

——————————————————————分支————————————————————
//添加分支
git branch <分支名>
            添加完分支更改完成后要commit一次
//重命名分支
git branch -m <旧分支名> <新分支名>
//查看所有本地分支
git branch
//切换分支
git checkout <分支名>
//创建并切换分支
git checkout -b <分支名>
//删除本地分支
git branch -d <分支名>
//合并分支
git merge <分支名>
//推送本地分支到github
git push <库名> <分支名>
git push <库名> --all
//github中设置默认分支
    Settings->Branches->Default branch->设置默认分支
//删除远程分支
git push <库名> -d <分支名>

————————————————————拉取远程仓库————————————————
//克隆仓库
git clone <仓库url> . //将仓库中的地址克隆到当前文件夹下
//获取远程仓库的更新
git fetch <库名>
//列出当前的关联的远程库
git remote -v
//关联远程仓库
git remote add <远程库名> <url> 
//删除远程库
git remote remove <远程库名>
//向远程库推送代码，并和当前分支关联  
git push -u <远程库名> <分支名> 
git push <远程库> <本地分支>:<远程分支>
//关闭一个PR
git commit --allow-empty -m "Close#4"

git push #如果本地的版本低于远程库，push默认是推不上去
git fetch #要想推送成功，必须先确保本地库和远程库的版本一致，fetch它会从远程仓库下载所有代码，但是它不会将代码和当前分支自动合并
		 #使用fetch拉取代码后，必须要手动对代码进行合并
git pull  #从服务器上拉取代码并自动合并.